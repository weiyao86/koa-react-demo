{"version":3,"sources":["webpack:///./views/home/index.js"],"names":["TweenOne","TweenOneGroup","React","Component","queue","pending","next","p","fn","shift","add","push","getQueue","clear","length","trigger","Class","star","current","self","calcCount","setRandom","forEach","curPercent","idx","curTime","timeTotal","console","log","doneByTime","totalTime","percent","cb","msg","timeEnd","time","size","sum","csize","csum","arr","rad","Math","ceil","random","startLoop","Date","timer","count","percentByms","begin","now","sub","cur","setState","nextTime","setTimeout","min","clearTimeout","this","state","className","animation","x","onChange","e","onClick","onStart","strokeColor"],"mappings":"83DAMoBA,IAASC,cAEXC,IAAMC,UAFxB,IAQMC,EAAS,WACb,IAAIC,EAAU,GAEd,SAASC,EAAKC,GACZ,IAAIC,EAAKH,EAAQI,QACbD,GACFA,EAAGF,GAIP,MAAO,CACLI,IAAK,SAAUF,GACK,mBAAPA,GAAmBH,EAAQM,KAAKH,IAG7CI,SAAU,WACR,OAAOP,GAGTQ,MAAO,WACLR,EAAQS,OAAS,GAGnBC,QAAS,WACPT,MAxBS,GA6BTU,E,0LACI,CACNC,MAAM,EACNC,QAAS,I,mBAGC,K,mBACA,G,kBAiDF,WACR,IAAIC,EAAO,EAAH,GACR,EAAKC,UAAY,EACJ,EAAKC,YAEXC,SAAQ,SAACC,EAAYC,GAC1B,IAAIC,EAAWF,EAAa,IAAO,EAAKG,UACxCtB,EAAMM,KAAI,SAAUJ,GAClBqB,QAAQC,IAAR,gBAAqBJ,EAAI,IACzBL,EAAKU,WAAW,CAACvB,OAAMwB,UAAUL,EAASM,QAAQR,EAAWS,GAAG,SAACC,GAC/DN,QAAQC,IAAIK,EAAG,eAAST,EAAI,IACA,GAAzBpB,EAAMQ,WAAWE,QAClBa,QAAQO,QAAQ,iBAMxBP,QAAQQ,KAAK,QACb/B,EAAMW,a,gDA9DN,IAJ8B,IAAtBqB,EAAsB,uDAAf,GAAIC,EAAW,uDAAL,IACrBC,EAAQF,EAAO,EACfG,EAAOF,EACPG,EAAM,GACHF,KAAS,CACd,IAAIG,EAAMC,KAAKC,KAAKD,KAAKE,UAAYL,EAAO,IAC5CC,EAAI7B,KAAK8B,GACTF,GAAQE,EAGV,OADAD,EAAI7B,KAAK4B,GACFC,I,oCAGiC,WAA9BlC,EAA8B,EAA9BA,KAAMwB,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAAQC,EAAK,EAALA,GAC/Ba,GAAa,IAAIC,KACjBC,EAAQ,KACRC,EAAQ,EAGRC,EAFQ,OAEIlB,EAAcD,GAClB,SAARoB,IACF,IAAIC,GAAO,IAAIL,KACXM,EAAMD,EAAMN,EAChBO,GAAOtB,IAAcsB,EAAMtB,GAC3B,IAAIuB,EAAMD,EAAMtB,EAMhB,GAJA,EAAKV,WAAa6B,EAElB,EAAKK,SAAS,CAAEpC,QAAS,EAAKE,YAE1BiC,EAAM,EAAG,CACX,IAAIE,EAdI,QAcgBJ,GAAON,EAdvB,OAcmCG,IACvCO,EAAW,IACbA,EAAW,GAEbR,EAAQS,WAAWN,EAAOR,KAAKe,IAlBvB,OAkBkCF,SAE1CG,aAAaX,GACF,mBAAJf,GAAkBA,EAAG,MAAD,OAAOD,EAAP,iBAAuB,EAAKX,UAA5B,iBAA8C4B,EAA9C,kBAA6DlB,IACxFxB,IAGF0C,IAEFE,K,+BAyBO,WACChC,EAAYyC,KAAKC,MAAjB1C,QACR,OACE,oCACE,wBAAI2C,UAAU,QAAd,QACA,kBAAC,IAAD,CACEC,UAAW,CAAEC,EAAG,IAChBC,SAAU,SAACC,MAIX,kBAAC,IAAD,CAAQC,QAAS,kBAAM,EAAKC,YAA5B,SAEF,kBAAC,IAAD,CACEC,YAAa,CACX,KAAM,UACN,OAAQ,WAEVrC,QAASb,S,GAhGChB,IAAMC,WAsGXa","file":"chunk/js/pagesHome.js","sourcesContent":["import { Link, Route } from 'dva/router';\nimport TweenOne from 'rc-tween-one';\nimport { Button, Progress } from 'antd';\nimport React from 'react';\nimport './style.less';\n\nlet TweenOneGroup = TweenOne.TweenOneGroup;\n\nclass Fun extends React.Component {\n  render() {\n    return <div>test</div>;\n  }\n}\n\nconst queue = (function () {\n  let pending = [];\n\n  function next(p) {\n    let fn = pending.shift();\n    if (fn) {\n      fn(next);\n    }\n  }\n\n  return {\n    add: function (fn) {\n      if (typeof fn === 'function') pending.push(fn);\n    },\n\n    getQueue: function () {\n      return pending;\n    },\n\n    clear: function () {\n      pending.length = 0;\n    },\n\n    trigger: function () {\n      next();\n    },\n  };\n})();\n\nclass Class extends React.Component {\n  state = {\n    star: false,\n    current: 0,\n  };\n\n  timeTotal = 10 * 1000;\n  calcCount = 0;\n\n  setRandom(size = 10, sum = 100) {\n    let csize = size - 1;\n    let csum = sum;\n    let arr = [];\n    while (csize--) {\n      let rad = Math.ceil(Math.random() * (csum / 2));\n      arr.push(rad);\n      csum -= rad;\n    }\n    arr.push(csum);\n    return arr;\n  }\n\n  doneByTime({next, totalTime, percent,cb}) {\n    let startLoop = +new Date();\n    let timer = null;\n    let count = 0;\n    let delay = 16.733;\n   \n    let percentByms=percent*delay/totalTime;\n    let begin = () => {\n      let now = +new Date();\n      let sub = now - startLoop;\n      sub >= totalTime && (sub = totalTime);\n      let cur = sub / totalTime;\n     \n      this.calcCount += percentByms;\n\n      this.setState({ current: this.calcCount });\n\n      if (cur < 1) {\n        let nextTime = delay - (now - (startLoop + count * delay));\n        if (nextTime < 0) {\n          nextTime = 0;\n        }\n        timer = setTimeout(begin, Math.min(delay, nextTime));\n      } else {\n        clearTimeout(timer);\n        typeof cb==\"function\" && cb(`进度:${percent}--总进度:${this.calcCount}---次数:${count}---块时间:${totalTime}`);\n        next();\n        \n      }\n      count++;\n    };\n    begin();\n  }\n\n  onStart = () => {\n    let self = this;\n    this.calcCount = 0;\n    let random = this.setRandom();\n\n    random.forEach((curPercent, idx) => {\n      let curTime = (curPercent / 100) * this.timeTotal;\n      queue.add(function (next) {\n        console.log(`当前步骤=>${idx+1}`);\n        self.doneByTime({next, totalTime:curTime, percent:curPercent,cb:(msg)=>{\n          console.log(msg+`---步骤${idx+1}`);\n          if(queue.getQueue().length==0){\n            console.timeEnd('time');\n          }\n        }});\n      });\n    });\n    \n    console.time('time');\n    queue.trigger();\n  };\n\n  render() {\n    const { current } = this.state;\n    return (\n      <>\n        <h2 className=\"wrap\">Home</h2>\n        <TweenOne\n          animation={{ x: 50 }}\n          onChange={(e) => {\n            // console.log(e);\n          }}\n        >\n          <Button onClick={() => this.onStart()}>Demo</Button>\n        </TweenOne>\n        <Progress\n          strokeColor={{\n            '0%': '#108ee9',\n            '100%': '#87d068',\n          }}\n          percent={current}\n        />\n      </>\n    );\n  }\n}\nexport default Class;\n"],"sourceRoot":""}